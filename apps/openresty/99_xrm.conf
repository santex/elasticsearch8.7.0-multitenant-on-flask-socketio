# nginx.conf: generated by prov on 2022-09-10 14:49:21


worker_processes auto ;
##worker_rlimit_nofile 8202 ;

events {
    worker_connections  4096;
}

http {
    underscores_in_headers on; # allow incoming headers with _
    # proxy_buffering (leave at default)
    proxy_buffering on ;
    # size of the headers in the response
    proxy_buffers 4 256k;
    proxy_buffer_size 128k;
    proxy_busy_buffers_size 256k;

    #
    proxy_cache_path /tmp/cluster/ingest/nginx/cache levels=1:2 keys_zone=cache_zone:500m max_size=10g inactive=5h use_temp_path=off;

    #
    proxy_cache cache_zone;
    #
    proxy_ignore_client_abort off; # abort if client does
    proxy_cache_convert_head on; # convert HEAD to GET for cache
    #
    large_client_header_buffers 128 24k ;
    #
    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;
    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;
    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;
    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;
    # if client stop responding, free up memory -- default 60
    send_timeout 15;
    # read timeout for the request body from client - default 60
    client_body_timeout   10;
    # how long to wait for the client to send a request header - default 60
    client_header_timeout 5;
    #
    proxy_connect_timeout 60;
    proxy_send_timeout 65;
    proxy_read_timeout 65;
    #
    charset UTF-8;
    server_names_hash_bucket_size 256;
    types_hash_max_size 2048;
    server_tokens off;
    include mime.types;
    default_type application/octet-stream;

    log_by_lua_block {
        -- if not nil process
        if ngx.var.upstream_addr ~= nil then
            ngx.var.my_upstream_addr = string.gsub(ngx.var.upstream_addr, "%s+", "_")
        end
    }
    # what protocol was used to reach here, need that for rewrite, if external proxy use that else use internal scheme
    map $http_x_forwarded_proto $my_proto {
        default $http_x_forwarded_proto ;
        '' $scheme ;
    }
    # if we came via proxy we use that port else we use port of http header
    map $http_x_forwarded_port $my_http_host {
        default "${host}:${http_x_forwarded_port}" ;
        '' $http_host ;
    }
    # if that header is returned add a _
    map $sent_http_x_xrm_forwarded_to $custom_sent_http_x_xrm_forwarded_to {
         default  "${sent_http_x_xrm_forwarded_to}_" ;
         '' '' ; 
    }
    # if not nil use else set to IP
    map $upstream_addr $custom_upstream_addr_log {
         default  $my_upstream_addr;
     # use local ip address if nginx is responding instead of the upstream

         '' '127.0.0.1' ;
 
    }
    # we do not cache for these paths
    map $request_uri $no_cache {
        # 0 means caching allowed
        default 0 ;
        # 1 means do not cache, what else for cdapi?
        ~(^/(dump|store|version)) 1 ;
    }
    # if the invalid_host is defined and 1 map it to INV: $host
    map $invalid_vhost $my_host {
        default $host ;
        1 "INV: ${host}" ;
    }
    # if header does not exist map it to blank for the logfile
    map $sent_http_x_xrm_responseratio $my_x_responseratio {
        default $sent_http_x_xrm_responseratio ;
        '' ' ' ;
    }
    # extract date
    map $my_iso_time $my_date {
        ~(?<datepart>(.*))(T.*) $datepart;
    }
    # extract time
    map $my_iso_time $my_time {
        ~((.*)T)(?<timepart>(.*))(\+.*) $timepart;
    }
    # allow remote IP or not
    map $no_remote_addr $my_remote_addr {
        default $remote_addr ;
        1 "UNSET" ;
    }
    map $is_maintenance $my_x_xrm_maintenance {
        default 'False' ;
        '1' 'True' ;
    }
    map $sent_http_x_xrm_complexity $my_sent_http_x_xrm_complexity {
        default $sent_http_x_xrm_complexity ;
        '' '0' ;
    }
    map $sent_http_x_xrm_noOfRefRequests $my_sent_http_x_xrm_noOfRefRequests {
        default $sent_http_x_xrm_noOfRefRequests ;
        '' '1' ;
    }
    map $request_uri $request_uri_path {
        "~^(?P<path>[^?]*)(\?.*)?$"  $path;
    }

    
    # directive for performance regarding $request_body
    client_body_buffer_size 128k;
    client_body_in_single_buffer on;

    map "$status" $has_wanted_status {
       ~^(500|400)  "1";
       default "0";
    }

    map "$has_wanted_status:$request_uri" $body_loggable {
      default 0; # default
      "~1:.*ingest/archive" 0; # not this one
      "~1:.*" 1; # but all others
    }

    # log to access_body.log
    log_format body_log escape=json
        '$my_host'
        ' $my_date'
        ' $my_time'
        ' $my_remote_addr'
        ' $request_method $request_uri $server_protocol'
        ' $custom_upstream_addr_log'
        '_'
        '$custom_sent_http_x_xrm_forwarded_to'
        '$my_request_id'
        ' $status'
        ' $body_bytes_sent'
        ' $request_time'
        ' $my_x_xrm_maintenance'
        ' $my_sent_http_x_xrm_complexity'
        ' $my_sent_http_x_xrm_noOfRefRequests'
        ' $my_x_responseratio'
        ' N:$request_time'
        ' $request_body' ;

    # additional log to access_body.log
    access_log /tmp/cluster/ingest/nginx/logs/access_body.log body_log flush=5s buffer=4096 if=$body_loggable;


    log_format json_log escape=json
        '{"host":"$my_host",'
        '"scheme":"$my_proto",'
        '"timestamp":"$my_iso_time",'
        '"fromip":"$my_remote_addr",'
        '"method":"$request_method",'
        '"request":"$request_uri_path",'
        '"request_args":"$args",'
        '"proto":"$server_protocol",'
        '"xid":"$custom_upstream_addr_log'
        '_'
        '$custom_sent_http_x_xrm_forwarded_to'
        '$my_request_id",'
        '"cstatus":"$upstream_cache_status",'
        '"status":"$status",'
        '"bytes":"$body_bytes_sent",'
        '"r_time":"$request_time",'
        '"nr_time":"$request_time",'
        '"maintenance":"$my_x_xrm_maintenance",'
        '"complexity":"$my_sent_http_x_xrm_complexity",'
        '"nrrefrequests":"$my_sent_http_x_xrm_noOfRefRequests",'
        '"responseratio":"$my_x_responseratio"}'; 

    # additional log to access_json.log
    access_log /tmp/cluster/ingest/nginx/logs/access_json.log json_log flush=5s buffer=4096;

    
    # log to access.log
    log_format mylogformat
        '$my_host'
        ' $my_date'
        ' $my_time'
        ' $my_remote_addr'
        ' $request_method $request_uri $server_protocol'
        ' $custom_upstream_addr_log'
        '_'
        '$custom_sent_http_x_xrm_forwarded_to'
        '$my_request_id'
        ' $status'
        ' $body_bytes_sent'
        ' $request_time'
        ' $my_x_xrm_maintenance'
        ' $my_sent_http_x_xrm_complexity'
        ' $my_sent_http_x_xrm_noOfRefRequests'
        ' $my_x_responseratio'
        ' N:$request_time'; 

    # buffer must not exceed atomic disk write size (4096 on linux)
    access_log /tmp/cluster/ingest/nginx/logs/access.log mylogformat flush=5s buffer=4096;

    error_log /tmp/cluster/ingest/nginx/logs/error.log;

    header_filter_by_lua_block {
        -- should provide these to the client in the response
        ngx.header["X-Durationseconds"] = ngx.var.request_time
        -- set to 0 if absent
        if ngx.header["x-xrm-complexity"] == nil then
            ngx.header["X-XRM-Complexity"] = "0"
        end
        -- set to 1 if absent
        if ngx.header["X-XRM-noOfRefRequests"] == nil then
            ngx.header["X-XRM-noOfRefRequests"] = "1"
        end
        ngx.header["X-XRM-Maintenance"] = "False"
        if ngx.var.is_maintenance == "1" then
            ngx.header["X-XRM-Maintenance"] = "True"
        end
        -- just beautify when present
        if ngx.header["X-XRM-ResponseRatio"] ~= nil then
            ngx.header["X-XRM-ResponseRatio"] = ngx.header["X-XRM-ResponseRatio"]
        end
        -- beautify
        ngx.header["X-Durationseconds"] = ngx.header["X-Durationseconds"]
        ngx.header["X-XRM-Complexity"] = ngx.header["X-XRM-Complexity"]
        ngx.header["X-XRM-noOfRefRequests"] = ngx.header["X-XRM-noOfRefRequests"]
        -- make zero when exponential (this can break zabbix parsing); only if not nil
        if ngx.header["X-Durationseconds"] ~= nil then
            if string.find(ngx.header["X-Durationseconds"], "E") then
                ngx.header["X-Durationseconds"] = "0.0"
            end
        end
        -- remove
        ngx.header["X-XRM-RequestID"] = ""
        -- set
        ngx.header["Server"] = "XRM"
    }

    upstream self_healthcheck {

        server node-0:10000 ;

    }

    upstream backend {
        least_conn;
        server node-0:8080 ;

        keepalive 512;
        keepalive_timeout 7;
        keepalive_requests 256;
    }

    upstream myself {
        server node-0:8080 ;
    }

    lua_shared_dict shm_healthcheck 10m;
    lua_socket_log_errors off;
    init_worker_by_lua_block {
        local hc = require "resty.upstream.healthcheck"

        -- self healthcheck to generate log entries for zabbix checks
        ok, err = hc.spawn_checker{
            shm = "shm_healthcheck",
            upstream = "self_healthcheck",
            type = "http",
            http_req =
            "HEAD /healthcheck HTTP/1.1\r\n" ..
            "Host: localhost\r\n" ..
            "\r\n",
            interval = 6000,
            timeout = 3000,
            rise = 5,
            fall = 2,
            valid_statuses = {200, 204},
            concurrency = 10,
        }
        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker locally: ", err)
            return
        end

    }

    server {
        listen 10000 default_server;
        listen 80 default_server ;

        set $no_remote_addr 0 ;
        set $invalid_vhost 1;
        set $my_iso_time $time_iso8601;
        set $my_request_id "";
        set $my_upstream_addr "";
        set $is_maintenance 0;

        set_by_lua_block $my_request_id {
            if ngx.var.http_x_xrm_requestid ~= nil then
                return ngx.var.request_id .. "_" .. string.gsub(ngx.var.http_x_xrm_requestid, "%s+", "_")
            end
            -- incoming request id not present
            return ngx.var.request_id
        }

        access_by_lua_block {
            if ngx.var.is_maintenance == "1" then
                ngx.status = ngx.HTTP_SERVICE_UNAVAILABLE
                ngx.say("")
                ngx.exit(ngx.HTTP_OK)
            end
        }

        location /healthcheck {
            proxy_pass                      http://myself/cd/admin/healthcheck;
            proxy_http_version              1.1;
            proxy_set_header Connection     "";
            proxy_pass_request_headers      on;
            proxy_set_header                X-XRM-msec $msec ;
            
            proxy_set_header                X-XRM-RequestID $my_request_id ;
            proxy_set_header                X-XRM-Tenant hct__ ;
            proxy_set_header                X-XRM-TenantList ["hct__"] ;
            proxy_set_header                X-XRM-Index  hct__ ;

            proxy_pass_header               Server;
        }
        
        location /failover_check {
            proxy_pass                      http://backend/cd/admin/healthcheck;
            proxy_http_version              1.1;
            proxy_set_header Connection     "";
            proxy_pass_request_headers      on;
            proxy_set_header                X-XRM-msec $msec ;
            
            proxy_set_header                X-XRM-RequestID $my_request_id ;
            proxy_set_header                X-XRM-Tenant hct__ ;
            proxy_set_header                X-XRM-TenantList ["hct__"] ;
            proxy_set_header                X-XRM-Index  hct__ ;

            proxy_pass_header               Server;
        }

        location = /status {
            default_type text/plain;
            content_by_lua_block {
                local hc = require "resty.upstream.healthcheck"
                ngx.print(hc.status_page())
            }
        }
        location = /basic_status {
            stub_status;
        }
        location / {
            return 404;
        }
    }

    server {
        listen 80;
        server_name cdapi-bixby-ingest.localhost ;
        set $no_remote_addr 1 ;
        set $my_iso_time $time_iso8601;
        
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;
        set_real_ip_from 0.0.0.0/0;

        
        set $my_request_id "";
        set $my_upstream_addr "";
        set $is_maintenance 0;
        set $my_request_uri ""; # this is for replacement of chars in the uri

        set_by_lua_block $my_request_id {
            ngx.var.my_request_uri = string.gsub(ngx.var.request_uri, "", "")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "{", "%%7B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "}", "%%7D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "%[", "%%5B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "]", "%%5D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "\"", "%%22")



            if ngx.var.http_x_xrm_requestid ~= nil then
                return ngx.var.request_id .. "_" .. string.gsub(ngx.var.http_x_xrm_requestid, "%s+", "_")
            end
            -- incoming request id not present
            return ngx.var.request_id
        }

        
        
        
        location / {

            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true' ;
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
                add_header 'Access-Control-Max-Age' '1728000';
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true' ;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,accept-encoding';

            

            rewrite                         ^ $my_request_uri ;
            include                         nginx_mapping.nginx ;

            proxy_pass                      http://backend$uri;

            proxy_http_version              1.1;
            proxy_set_header Connection     "";
            proxy_pass_request_headers      on;
            # uncomment and reload openresty to activate
            #proxy_set_header               X-XRM-RequestLogging bixby_ingest ;
            
            proxy_set_header                X-XRM-msec $msec ;
            proxy_set_header                X-XRM-RequestID $my_request_id ;
            add_header                      X-XSS-Protection "1; mode=block" always;
            add_header                      X-Content-Type-Options "nosniff" always;
            add_header                      X-Frame-Options "DENY" always;
            
            proxy_set_header                X-XRM-Tenant bixby_ingest ;
            proxy_set_header                X-XRM-TenantList ["bixby_ingest"] ;
            proxy_set_header                X-XRM-Index  bixby_ingest ;
            proxy_set_header                permissionChecked "" ; # do no pass
            proxy_set_header                X-SSL-certificate "" ; # do not pass
            proxy_set_header                X-XRM-Vhost $host ;
            

            client_max_body_size            200M;
            proxy_pass_header               Server;
            
            

        }



    }

    server {
        listen 80;
        server_name cdapi-ingest-1.localhost ;
        set $no_remote_addr 1 ;
        set $my_iso_time $time_iso8601;
        
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;
        set_real_ip_from 0.0.0.0/0;

        
        set $my_request_id "";
        set $my_upstream_addr "";
        set $is_maintenance 0;
        set $my_request_uri ""; # this is for replacement of chars in the uri

        set_by_lua_block $my_request_id {
            ngx.var.my_request_uri = string.gsub(ngx.var.request_uri, "", "")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "{", "%%7B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "}", "%%7D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "%[", "%%5B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "]", "%%5D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "\"", "%%22")



            if ngx.var.http_x_xrm_requestid ~= nil then
                return ngx.var.request_id .. "_" .. string.gsub(ngx.var.http_x_xrm_requestid, "%s+", "_")
            end
            -- incoming request id not present
            return ngx.var.request_id
        }

        
        
        
        location / {

            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true' ;
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
                add_header 'Access-Control-Max-Age' '1728000';
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true' ;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,accept-encoding';

            

            rewrite                         ^ $my_request_uri ;
            include                         nginx_mapping.nginx ;

            proxy_pass                      http://backend$uri;

            proxy_http_version              1.1;
            proxy_set_header Connection     "";
            proxy_pass_request_headers      on;
            # uncomment and reload openresty to activate
            #proxy_set_header               X-XRM-RequestLogging ingest_1 ;
            
            proxy_set_header                X-XRM-msec $msec ;
            proxy_set_header                X-XRM-RequestID $my_request_id ;
            add_header                      X-XSS-Protection "1; mode=block" always;
            add_header                      X-Content-Type-Options "nosniff" always;
            add_header                      X-Frame-Options "DENY" always;
            
            proxy_set_header                X-XRM-Tenant ingest_1 ;
            proxy_set_header                X-XRM-TenantList ["ingest_1"] ;
            proxy_set_header                X-XRM-Index  ingest_1 ;
            proxy_set_header                permissionChecked "" ; # do no pass
            proxy_set_header                X-SSL-certificate "" ; # do not pass
            proxy_set_header                X-XRM-Vhost $host ;
            

            client_max_body_size            200M;
            proxy_pass_header               Server;
            
            

        }



    }

    server {
        listen 80;
        server_name cdapi-mmnewmedia-ingest.localhost ;
        set $no_remote_addr 1 ;
        set $my_iso_time $time_iso8601;
        
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;
        set_real_ip_from 0.0.0.0/0;

        
        set $my_request_id "";
        set $my_upstream_addr "";
        set $is_maintenance 0;
        set $my_request_uri ""; # this is for replacement of chars in the uri

        set_by_lua_block $my_request_id {
            ngx.var.my_request_uri = string.gsub(ngx.var.request_uri, "", "")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "{", "%%7B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "}", "%%7D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "%[", "%%5B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "]", "%%5D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "\"", "%%22")



            if ngx.var.http_x_xrm_requestid ~= nil then
                return ngx.var.request_id .. "_" .. string.gsub(ngx.var.http_x_xrm_requestid, "%s+", "_")
            end
            -- incoming request id not present
            return ngx.var.request_id
        }

        
        
        
        location / {

            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true' ;
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
                add_header 'Access-Control-Max-Age' '1728000';
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true' ;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,accept-encoding';

            

            rewrite                         ^ $my_request_uri ;
            include                         nginx_mapping.nginx ;

            proxy_pass                      http://backend$uri;

            proxy_http_version              1.1;
            proxy_set_header Connection     "";
            proxy_pass_request_headers      on;
            # uncomment and reload openresty to activate
            #proxy_set_header               X-XRM-RequestLogging mmnewmedia_ingest ;
            
            proxy_set_header                X-XRM-msec $msec ;
            proxy_set_header                X-XRM-RequestID $my_request_id ;
            add_header                      X-XSS-Protection "1; mode=block" always;
            add_header                      X-Content-Type-Options "nosniff" always;
            add_header                      X-Frame-Options "DENY" always;
            
            proxy_set_header                X-XRM-Tenant mmnewmedia_ingest ;
            proxy_set_header                X-XRM-TenantList ["mmnewmedia_ingest"] ;
            proxy_set_header                X-XRM-Index  mmnewmedia_ingest ;
            proxy_set_header                permissionChecked "" ; # do no pass
            proxy_set_header                X-SSL-certificate "" ; # do not pass
            proxy_set_header                X-XRM-Vhost $host ;
            

            client_max_body_size            200M;
            proxy_pass_header               Server;
            
            

        }



    }

    server {
        listen 80;
        server_name cdapi-pilot-ingest.localhost ;
        set $no_remote_addr 1 ;
        set $my_iso_time $time_iso8601;
        
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;
        set_real_ip_from 0.0.0.0/0;

        
        set $my_request_id "";
        set $my_upstream_addr "";
        set $is_maintenance 0;
        set $my_request_uri ""; # this is for replacement of chars in the uri

        set_by_lua_block $my_request_id {
            ngx.var.my_request_uri = string.gsub(ngx.var.request_uri, "", "")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "{", "%%7B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "}", "%%7D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "%[", "%%5B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "]", "%%5D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "\"", "%%22")



            if ngx.var.http_x_xrm_requestid ~= nil then
                return ngx.var.request_id .. "_" .. string.gsub(ngx.var.http_x_xrm_requestid, "%s+", "_")
            end
            -- incoming request id not present
            return ngx.var.request_id
        }

        
        
        
        location / {

            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true' ;
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
                add_header 'Access-Control-Max-Age' '1728000';
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true' ;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,accept-encoding';

            

            rewrite                         ^ $my_request_uri ;
            include                         nginx_mapping.nginx ;

            proxy_pass                      http://backend$uri;

            proxy_http_version              1.1;
            proxy_set_header Connection     "";
            proxy_pass_request_headers      on;
            # uncomment and reload openresty to activate
            #proxy_set_header               X-XRM-RequestLogging pilot_ingest ;
            
            proxy_set_header                X-XRM-msec $msec ;
            proxy_set_header                X-XRM-RequestID $my_request_id ;
            add_header                      X-XSS-Protection "1; mode=block" always;
            add_header                      X-Content-Type-Options "nosniff" always;
            add_header                      X-Frame-Options "DENY" always;
            
            proxy_set_header                X-XRM-Tenant pilot_ingest ;
            proxy_set_header                X-XRM-TenantList ["pilot_ingest"] ;
            proxy_set_header                X-XRM-Index  pilot_ingest ;
            proxy_set_header                permissionChecked "" ; # do no pass
            proxy_set_header                X-SSL-certificate "" ; # do not pass
            proxy_set_header                X-XRM-Vhost $host ;
            

            client_max_body_size            200M;
            proxy_pass_header               Server;
            
            

        }



    }

    server {
        listen 80;
        server_name cdapi-sportworld-ingest.localhost ;
        set $no_remote_addr 1 ;
        set $my_iso_time $time_iso8601;
        
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;
        set_real_ip_from 0.0.0.0/0;

        
        set $my_request_id "";
        set $my_upstream_addr "";
        set $is_maintenance 0;
        set $my_request_uri ""; # this is for replacement of chars in the uri

        set_by_lua_block $my_request_id {
            ngx.var.my_request_uri = string.gsub(ngx.var.request_uri, "", "")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "{", "%%7B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "}", "%%7D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "%[", "%%5B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "]", "%%5D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "\"", "%%22")



            if ngx.var.http_x_xrm_requestid ~= nil then
                return ngx.var.request_id .. "_" .. string.gsub(ngx.var.http_x_xrm_requestid, "%s+", "_")
            end
            -- incoming request id not present
            return ngx.var.request_id
        }

        
        
        
        location / {

            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true' ;
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
                add_header 'Access-Control-Max-Age' '1728000';
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true' ;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,accept-encoding';

            

            rewrite                         ^ $my_request_uri ;
            include                         nginx_mapping.nginx ;

            proxy_pass                      http://backend$uri;

            proxy_http_version              1.1;
            proxy_set_header Connection     "";
            proxy_pass_request_headers      on;
            # uncomment and reload openresty to activate
            #proxy_set_header               X-XRM-RequestLogging sportworld_ingest ;
            
            proxy_set_header                X-XRM-msec $msec ;
            proxy_set_header                X-XRM-RequestID $my_request_id ;
            add_header                      X-XSS-Protection "1; mode=block" always;
            add_header                      X-Content-Type-Options "nosniff" always;
            add_header                      X-Frame-Options "DENY" always;
            
            proxy_set_header                X-XRM-Tenant sportworld_ingest ;
            proxy_set_header                X-XRM-TenantList ["sportworld_ingest"] ;
            proxy_set_header                X-XRM-Index  sportworld_ingest ;
            proxy_set_header                permissionChecked "" ; # do no pass
            proxy_set_header                X-SSL-certificate "" ; # do not pass
            proxy_set_header                X-XRM-Vhost $host ;
            

            client_max_body_size            200M;
            proxy_pass_header               Server;
            
            

        }



    }

    server {
        listen 80;
        server_name cdapi-test-1.localhost ;
        set $no_remote_addr 1 ;
        set $my_iso_time $time_iso8601;
        
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;
        set_real_ip_from 0.0.0.0/0;

        
        set $my_request_id "";
        set $my_upstream_addr "";
        set $is_maintenance 0;
        set $my_request_uri ""; # this is for replacement of chars in the uri

        set_by_lua_block $my_request_id {
            ngx.var.my_request_uri = string.gsub(ngx.var.request_uri, "", "")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "{", "%%7B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "}", "%%7D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "%[", "%%5B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "]", "%%5D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "\"", "%%22")



            if ngx.var.http_x_xrm_requestid ~= nil then
                return ngx.var.request_id .. "_" .. string.gsub(ngx.var.http_x_xrm_requestid, "%s+", "_")
            end
            -- incoming request id not present
            return ngx.var.request_id
        }

        
        
        
        location / {

            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true' ;
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
                add_header 'Access-Control-Max-Age' '1728000';
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true' ;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,accept-encoding';

            

            rewrite                         ^ $my_request_uri ;
            include                         nginx_mapping.nginx ;

            proxy_pass                      http://backend$uri;

            proxy_http_version              1.1;
            proxy_set_header Connection     "";
            proxy_pass_request_headers      on;
            # uncomment and reload openresty to activate
            #proxy_set_header               X-XRM-RequestLogging test_1 ;
            
            proxy_set_header                X-XRM-msec $msec ;
            proxy_set_header                X-XRM-RequestID $my_request_id ;
            add_header                      X-XSS-Protection "1; mode=block" always;
            add_header                      X-Content-Type-Options "nosniff" always;
            add_header                      X-Frame-Options "DENY" always;
            
            proxy_set_header                X-XRM-Tenant test_1 ;
            proxy_set_header                X-XRM-TenantList ["test_1"] ;
            proxy_set_header                X-XRM-Index  test_1 ;
            proxy_set_header                permissionChecked "" ; # do no pass
            proxy_set_header                X-SSL-certificate "" ; # do not pass
            proxy_set_header                X-XRM-Vhost $host ;
            

            client_max_body_size            200M;
            proxy_pass_header               Server;
            
            

        }



    }

    server {
        listen 80;
        server_name cdapi-test-2.localhost ;
        set $no_remote_addr 1 ;
        set $my_iso_time $time_iso8601;
        
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;
        set_real_ip_from 0.0.0.0/0;

        
        set $my_request_id "";
        set $my_upstream_addr "";
        set $is_maintenance 0;
        set $my_request_uri ""; # this is for replacement of chars in the uri

        set_by_lua_block $my_request_id {
            ngx.var.my_request_uri = string.gsub(ngx.var.request_uri, "", "")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "{", "%%7B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "}", "%%7D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "%[", "%%5B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "]", "%%5D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "\"", "%%22")



            if ngx.var.http_x_xrm_requestid ~= nil then
                return ngx.var.request_id .. "_" .. string.gsub(ngx.var.http_x_xrm_requestid, "%s+", "_")
            end
            -- incoming request id not present
            return ngx.var.request_id
        }

        
        
        
        location / {

            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true' ;
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
                add_header 'Access-Control-Max-Age' '1728000';
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true' ;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,accept-encoding';

            

            rewrite                         ^ $my_request_uri ;
            include                         nginx_mapping.nginx ;

            proxy_pass                      http://backend$uri;

            proxy_http_version              1.1;
            proxy_set_header Connection     "";
            proxy_pass_request_headers      on;
            # uncomment and reload openresty to activate
            #proxy_set_header               X-XRM-RequestLogging test_2 ;
            
            proxy_set_header                X-XRM-msec $msec ;
            proxy_set_header                X-XRM-RequestID $my_request_id ;
            add_header                      X-XSS-Protection "1; mode=block" always;
            add_header                      X-Content-Type-Options "nosniff" always;
            add_header                      X-Frame-Options "DENY" always;
            
            proxy_set_header                X-XRM-Tenant test_2 ;
            proxy_set_header                X-XRM-TenantList ["test_2"] ;
            proxy_set_header                X-XRM-Index  test_2 ;
            proxy_set_header                permissionChecked "" ; # do no pass
            proxy_set_header                X-SSL-certificate "" ; # do not pass
            proxy_set_header                X-XRM-Vhost $host ;
            

            client_max_body_size            200M;
            proxy_pass_header               Server;
            
            

        }



    }

    server {
        listen 80;
        server_name cdapi-tvdstv-ingest.localhost ;
        set $no_remote_addr 1 ;
        set $my_iso_time $time_iso8601;
        
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;
        set_real_ip_from 0.0.0.0/0;

        
        set $my_request_id "";
        set $my_upstream_addr "";
        set $is_maintenance 0;
        set $my_request_uri ""; # this is for replacement of chars in the uri

        set_by_lua_block $my_request_id {
            ngx.var.my_request_uri = string.gsub(ngx.var.request_uri, "", "")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "{", "%%7B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "}", "%%7D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "%[", "%%5B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "]", "%%5D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "\"", "%%22")



            if ngx.var.http_x_xrm_requestid ~= nil then
                return ngx.var.request_id .. "_" .. string.gsub(ngx.var.http_x_xrm_requestid, "%s+", "_")
            end
            -- incoming request id not present
            return ngx.var.request_id
        }

        
        
        
        location / {

            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true' ;
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
                add_header 'Access-Control-Max-Age' '1728000';
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true' ;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,accept-encoding';

            

            rewrite                         ^ $my_request_uri ;
            include                         nginx_mapping.nginx ;

            proxy_pass                      http://backend$uri;

            proxy_http_version              1.1;
            proxy_set_header Connection     "";
            proxy_pass_request_headers      on;
            # uncomment and reload openresty to activate
            #proxy_set_header               X-XRM-RequestLogging tvdstv_ingest ;
            
            proxy_set_header                X-XRM-msec $msec ;
            proxy_set_header                X-XRM-RequestID $my_request_id ;
            add_header                      X-XSS-Protection "1; mode=block" always;
            add_header                      X-Content-Type-Options "nosniff" always;
            add_header                      X-Frame-Options "DENY" always;
            
            proxy_set_header                X-XRM-Tenant tvdstv_ingest ;
            proxy_set_header                X-XRM-TenantList ["tvdstv_ingest"] ;
            proxy_set_header                X-XRM-Index  tvdstv_ingest ;
            proxy_set_header                permissionChecked "" ; # do no pass
            proxy_set_header                X-SSL-certificate "" ; # do not pass
            proxy_set_header                X-XRM-Vhost $host ;
            

            client_max_body_size            200M;
            proxy_pass_header               Server;
            
            

        }



    }

    server {
        listen 80;
        server_name cdapi-wsesportapp-ingest.localhost ;
        set $no_remote_addr 1 ;
        set $my_iso_time $time_iso8601;
        
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;
        set_real_ip_from 0.0.0.0/0;

        
        set $my_request_id "";
        set $my_upstream_addr "";
        set $is_maintenance 0;
        set $my_request_uri ""; # this is for replacement of chars in the uri

        set_by_lua_block $my_request_id {
            ngx.var.my_request_uri = string.gsub(ngx.var.request_uri, "", "")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "{", "%%7B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "}", "%%7D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "%[", "%%5B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "]", "%%5D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "\"", "%%22")



            if ngx.var.http_x_xrm_requestid ~= nil then
                return ngx.var.request_id .. "_" .. string.gsub(ngx.var.http_x_xrm_requestid, "%s+", "_")
            end
            -- incoming request id not present
            return ngx.var.request_id
        }

        
        
        
        location / {

            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true' ;
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
                add_header 'Access-Control-Max-Age' '1728000';
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true' ;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,accept-encoding';

            

            rewrite                         ^ $my_request_uri ;
            include                         nginx_mapping.nginx ;

            proxy_pass                      http://backend$uri;

            proxy_http_version              1.1;
            proxy_set_header Connection     "";
            proxy_pass_request_headers      on;
            # uncomment and reload openresty to activate
            #proxy_set_header               X-XRM-RequestLogging wsesportapp_ingest ;
            
            proxy_set_header                X-XRM-msec $msec ;
            proxy_set_header                X-XRM-RequestID $my_request_id ;
            add_header                      X-XSS-Protection "1; mode=block" always;
            add_header                      X-Content-Type-Options "nosniff" always;
            add_header                      X-Frame-Options "DENY" always;
            
            proxy_set_header                X-XRM-Tenant wsesportapp_ingest ;
            proxy_set_header                X-XRM-TenantList ["wsesportapp_ingest"] ;
            proxy_set_header                X-XRM-Index  wsesportapp_ingest ;
            proxy_set_header                permissionChecked "" ; # do no pass
            proxy_set_header                X-SSL-certificate "" ; # do not pass
            proxy_set_header                X-XRM-Vhost $host ;
            

            client_max_body_size            200M;
            proxy_pass_header               Server;
            
            

        }



    }

    server {
        listen 80;
        server_name cdapi-zattoo-ingest.localhost ;
        set $no_remote_addr 1 ;
        set $my_iso_time $time_iso8601;
        
        real_ip_header X-Forwarded-For;
        real_ip_recursive on;
        set_real_ip_from 0.0.0.0/0;

        
        set $my_request_id "";
        set $my_upstream_addr "";
        set $is_maintenance 0;
        set $my_request_uri ""; # this is for replacement of chars in the uri

        set_by_lua_block $my_request_id {
            ngx.var.my_request_uri = string.gsub(ngx.var.request_uri, "", "")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "{", "%%7B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "}", "%%7D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "%[", "%%5B")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "]", "%%5D")
            ngx.var.my_request_uri = string.gsub(ngx.var.my_request_uri, "\"", "%%22")



            if ngx.var.http_x_xrm_requestid ~= nil then
                return ngx.var.request_id .. "_" .. string.gsub(ngx.var.http_x_xrm_requestid, "%s+", "_")
            end
            -- incoming request id not present
            return ngx.var.request_id
        }

        
        
        
        location / {

            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Credentials' 'true' ;
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
                add_header 'Access-Control-Max-Age' '1728000';
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true' ;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Accept,api_key,Content-Encoding,accept-encoding';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,accept-encoding';

            

            rewrite                         ^ $my_request_uri ;
            include                         nginx_mapping.nginx ;

            proxy_pass                      http://backend$uri;

            proxy_http_version              1.1;
            proxy_set_header Connection     "";
            proxy_pass_request_headers      on;
            # uncomment and reload openresty to activate
            #proxy_set_header               X-XRM-RequestLogging zattoo_ingest ;
            
            proxy_set_header                X-XRM-msec $msec ;
            proxy_set_header                X-XRM-RequestID $my_request_id ;
            add_header                      X-XSS-Protection "1; mode=block" always;
            add_header                      X-Content-Type-Options "nosniff" always;
            add_header                      X-Frame-Options "DENY" always;
            
            proxy_set_header                X-XRM-Tenant zattoo_ingest ;
            proxy_set_header                X-XRM-TenantList ["zattoo_ingest"] ;
            proxy_set_header                X-XRM-Index  zattoo_ingest ;
            proxy_set_header                permissionChecked "" ; # do no pass
            proxy_set_header                X-SSL-certificate "" ; # do not pass
            proxy_set_header                X-XRM-Vhost $host ;
            

            client_max_body_size            200M;
            proxy_pass_header               Server;
            
            

        }



    }

}
